import { OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';
import { Socket, Namespace } from 'socket.io';
export declare class GameGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {
    io: Namespace;
    rooms: any[];
    PLAYER_HEIGHT: number;
    PLAYER_WIDTH: number;
    BALL_RADIUS: number;
    FRAME_PER_SEC: number;
    STEP: number;
    canvas: any;
    isRoomFull(room_name: string): boolean;
    playerExist(room: any, login: string): boolean;
    socketExist(room: any, socket_id: string): boolean;
    watcherExist(room: any, socket_id: string): boolean;
    newRoom(speedMode: number, canvas: any): void;
    getMove(canvas: any, player_num: number): {
        x: number;
        y: number;
        w: number;
        h: number;
        top: number;
        bottom: number;
        left: number;
        right: number;
    };
    initBall(room_index: number): void;
    collision(room_index: number, player_index: number): boolean;
    update(room_index: number): void;
    liveMatch(): void;
    addPlayer(client: Socket, payload: any, room_index: number, player_num: number): void;
    getPlayerIndex(players: any, socket_id: string): number;
    emitToClient(room_index: number): void;
    onGame(room_index: number): void;
    getRoomIndex(socket_id: string): number;
    getRoomIndexByNmae(name: string): number;
    newCanvas(room_index: number, canvas: any): void;
    roomByMode(client: Socket, payload: any): boolean;
    afterInit(server: any): void;
    handleConnection(client: Socket): void;
    handleDisconnect(client: Socket): void;
    initGame(client: Socket, payload: any): void;
    moveKey(client: Socket, payload: any): void;
    watcher(client: Socket, payload: any): void;
    getLiveMatch(): void;
}
