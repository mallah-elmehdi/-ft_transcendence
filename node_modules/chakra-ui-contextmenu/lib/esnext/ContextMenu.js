var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { useCallback, useEffect, useRef, useState } from 'react';
import { useEventListener, Portal, Menu, MenuButton } from '@chakra-ui/react';
export function ContextMenu(props) {
    var _a;
    var _b = useState(false), isOpen = _b[0], setIsOpen = _b[1];
    var _c = useState(false), isRendered = _c[0], setIsRendered = _c[1];
    var _d = useState(false), isDeferredOpen = _d[0], setIsDeferredOpen = _d[1];
    var _e = useState([0, 0]), position = _e[0], setPosition = _e[1];
    var targetRef = useRef(null);
    useEffect(function () {
        if (isOpen) {
            setTimeout(function () {
                setIsRendered(true);
                setTimeout(function () {
                    setIsDeferredOpen(true);
                });
            });
        }
        else {
            setIsDeferredOpen(false);
            var timeout_1 = setTimeout(function () {
                setIsRendered(isOpen);
            }, 1000);
            return function () { return clearTimeout(timeout_1); };
        }
    }, [isOpen]);
    useEventListener('contextmenu', function (e) {
        var _a;
        if (((_a = targetRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target)) || e.target === targetRef.current) {
            e.preventDefault();
            setIsOpen(true);
            setPosition([e.pageX, e.pageY]);
        }
        else {
            setIsOpen(false);
        }
    });
    var onCloseHandler = useCallback(function () {
        var _a, _b;
        (_b = (_a = props.menuProps) === null || _a === void 0 ? void 0 : _a.onClose) === null || _b === void 0 ? void 0 : _b.call(_a);
        setIsOpen(false);
    }, [(_a = props.menuProps) === null || _a === void 0 ? void 0 : _a.onClose, setIsOpen]);
    return (React.createElement(React.Fragment, null,
        props.children(targetRef),
        isRendered && (React.createElement(Portal, __assign({}, props.portalProps),
            React.createElement(Menu, __assign({ isOpen: isDeferredOpen, gutter: 0 }, props.menuProps, { onClose: onCloseHandler }),
                React.createElement(MenuButton, __assign({ "aria-hidden": true, w: 1, h: 1, style: {
                        position: 'absolute',
                        left: position[0],
                        top: position[1],
                        cursor: 'default',
                    } }, props.menuButtonProps)),
                props.renderMenu())))));
}
